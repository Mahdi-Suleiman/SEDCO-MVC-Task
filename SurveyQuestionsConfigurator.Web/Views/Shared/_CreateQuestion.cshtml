@model SurveyQuestionsConfigurator.Entities.Question

@{
    ViewBag.Title = "_Question";
    string cultureInfo = System.Globalization.CultureInfo.CurrentCulture.Name;
    string tArabic = "ar-JO";
    bool tIsArabic = (cultureInfo == tArabic ? true : false);
    string[] tArabicQuestionType = { "وجه مبتسم", "شريط", "نجمة" };
    string[] tEnglishQuestionType = { "Smiley Face", "Slider", "Star" };

    string tSmiley = cultureInfo == tArabic ? tArabicQuestionType[0] : tEnglishQuestionType[0];
    string tSlider = cultureInfo == tArabic ? tArabicQuestionType[1] : tEnglishQuestionType[1];
    string tStar = cultureInfo == tArabic ? tArabicQuestionType[2] : tEnglishQuestionType[2];
}


<div class="form-group">
    <div class="col-md-12">
        @Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "" })
        @Html.EditorFor(model => model.Order, new { htmlAttributes = new { @class = "form-control", min = "1", max = "9999999" } })
        @Html.ValidationMessageFor(model => model.Order, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    <div class="col-md-12">
        @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "" })
        @Html.TextAreaFor(model => model.Text, htmlAttributes: new { @class = "form-control", rows = "3", style = "resize:vertical;", maxlength = "3999" })
        @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")



}
<script>
    ///Change partial view on selection change
    function QuestionTypeChanged() {
        const tActionNames = ["/SmileyQuestion/Create", "/SliderQuestion/Create", "/StarQuestion/Create"];
        const sel = document.getElementById("Type"); //dropdownlist
        const text = sel.selectedIndex;
        switch (text) {
            case 0:
            default: {
                window.location.pathname = tActionNames[0];
            }
                break;
            case 1: {
                window.location.pathname = tActionNames[1];
            }
                break;
            case 2: {
                window.location.pathname = tActionNames[2];
            }
                break;
            //default: {
            //    window.location.pathname = tActionNames[0];
            //}
            //    break;
        }
    }

</script>
@*<script>
        ///Change partial view on selection change
        function QuestionTypeChanged() {
            const tActionNames = ["/Questions/PartialSmiley", "/Questions/PartialSlider", "/Questions/PartialStar"];
            const sel = document.getElementById("Type"); //dropdownlist
            const text = sel.selectedIndex;
            switch (text) {
                case 0: {
                    $("#partialView").load(tActionNames[0]);
                }
                    break;
                case 1: {
                    $("#partialView").load(tActionNames[1]);
                }
                    break;
                case 2: {
                    $("#partialView").load(tActionNames[2]);
                }
                    break;
                default: {
                    $("#partialView").load(tActionNames[0]);
                }
                    break;
            }
        }

    </script>*@

